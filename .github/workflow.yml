name: Aircall Image Resize application

on: [ pull_request ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Get image name
        id: image-name
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: aircall
          IMAGE_TAG: aircall-image-${{ github.sha }}
        run: |
          echo "name=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "secret-name=$(gpg --symmetric --batch --quiet \
            --passphrase ${{ secrets.ENCRYPTION_SECRET }} \
            --output - <(echo "$REGISTRY/$REPOSITORY:$IMAGE_TAG") | base64 -w0 \
          )" >> $GITHUB_OUTPUT
      - name: Build and Publish docker image to ECR
        run: >-
          docker build -t ${{ steps.image-name.outputs.name }} .
          docker push ${{ steps.image-name.outputs.name }}
      - name: Scan Docker image
        id: docker-scan
        uses: alexjurkiewicz/ecr-scan-image@v1.7.0
        with:
          repository: aircall
          tag: ${{ steps.docker-build.outputs.tag }}
      - run: echo "${{ steps.docker-scan.outputs.total }} total vulnerabilities"
    outputs:  
      secret-name: ${{ steps.image-name.outputs.secret-name }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    defaults:
      run:
        working-directory: ./terraform
    steps: 
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Decrypt image name from previous build job
        id: image-name
        run: |
          echo "name=$(gpg --decrypt --quiet --batch \
          --passphrase ${{ secrets.ENCRYPTION_SECRET }} \
          --output - <(echo "${{ needs.build.outputs.encrypted-name }}" \
          | base64 -d))" >> $GITHUB_OUTPUT
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          role-skip-session-tagging: true
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.3
      - name: Initialize terraform
        run: terraform init
      - name: Format terraform
        run: terraform fmt
      - name: Plan Terraform 
        run: terraform plan -out tfplan
        env:
          TF_VAR_image_url: ${{ steps.image-name.outputs.name }}
